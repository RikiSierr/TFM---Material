modelo_nlme_temporal <- lme(
fixed = Min_Playing.Time_Generales ~ Age + Season_End_Year,
random = ~ 1 | Player,
correlation = corAR1(form = ~ Time_Index | Player),
data = GK_data
)
# Ver un resumen del modelo ajustado
summary(modelo_nlme_temporal)
GK_data
GK_data$Time_Index
# Ajustar el modelo lineal mixto con la componente temporal usando el índice de tiempo artificial
modelo_nlme_temporal <- lme(
fixed = Min_Playing.Time_Generales ~ Age + Season_End_Year,
random = ~ 1 | Player,
correlation = corAR1(form = ~ Time_Index | Player),
data = GK_data
)
# Ver un resumen del modelo ajustado
summary(modelo_nlme_temporal)
# Ajustar el modelo lineal mixto con la componente temporal usando el índice de tiempo artificial
modelo_nlme_temporal <- lme(
fixed = Min_Playing.Time_Generales ~ Age + Time_Index,
random = ~ 1 | Player,
correlation = corAR1(form = ~ Time_Index | Player),
data = GK_data
)
# Ver un resumen del modelo ajustado
summary(modelo_nlme_temporal)
library(readxl)
Lab3_Datos <- read_excel("C:/Users/rsier/Desktop/MASTERS/LaSalle - MUDS/2n Semestre/Optativa2 - Forecasting/T3 Modelos y sistemas dinámicos/Lab3_Datos.xlsx",
sheet = "Tarea_1")
head(Lab3_Datos)
Tarea1 <- read_excel("C:/Users/rsier/Desktop/MASTERS/LaSalle - MUDS/2n Semestre/Optativa2 - Forecasting/T3 Modelos y sistemas dinámicos/Lab3_Datos.xlsx",
sheet = "Tarea_1")
head(Tarea1)
library(dyplyr)
library(dplyr)
Tarea1 <- Tarea1 %>%
mutate(Time_Index = row_number())
Tarea1
Tarea1 <- Tarea1 %>%
mutate(Time_Index = row_number())
ggplot(Tarea1,
aes(x = Time_Index, y = `Ventas (M€)`)) +
geom_line()
library(ggplot2)
Tarea1 <- Tarea1 %>%
mutate(Time_Index = row_number())
ggplot(Tarea1,
aes(x = Time_Index, y = `Ventas (M€)`)) +
geom_line()
Tarea1
Tarea1$Predicciones_ingenuas <- c(rep(NA,4) , Tarea1$`Ventas (M€)`[1:(length(Tarea1$`Ventas (M€)`)-4)])
Tarea1
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
medias_estacionales
rep(medias_estacionales, 4)
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 4)
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 3)
Tarea1
ggplot(Tarea1, aes(x = Trimestre)) +
geom_line(aes(y = `Ventas (M€)`, colour = "Serie Real"), size = 1.2) +
geom_point(aes(y = `Ventas (M€)`, colour = "Serie Real")) +
geom_line(aes(y = Predicciones_ingenuas, colour = "Método ingenuo"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = Predicciones_ingenuas, colour = "Método ingenuo")) +
geom_line(aes(y = medias_estacionales, colour = "Método de las medias estacionales"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = medias_estacionales, colour = "Método de las medias estacionales")) +
labs(title = "Comparación de la Serie Real con las distintas predicciones",
x = "Trimestre", y = "M€") +
scale_colour_manual("", breaks = c("Serie Real", "Método ingenuo", "Método de las medias estacionales"),
values = c("blue", "green", "red")) +
theme_minimal()
ggplot(Tarea1, aes(x = Time_Index)) +
geom_line(aes(y = `Ventas (M€)`, colour = "Serie Real"), size = 1.2) +
geom_point(aes(y = `Ventas (M€)`, colour = "Serie Real")) +
geom_line(aes(y = Predicciones_ingenuas, colour = "Método ingenuo"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = Predicciones_ingenuas, colour = "Método ingenuo")) +
geom_line(aes(y = medias_estacionales, colour = "Método de las medias estacionales"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = medias_estacionales, colour = "Método de las medias estacionales")) +
labs(title = "Comparación de la Serie Real con las distintas predicciones",
x = "Trimestre", y = "M€") +
scale_colour_manual("", breaks = c("Serie Real", "Método ingenuo", "Método de las medias estacionales"),
values = c("blue", "green", "red")) +
theme_minimal()
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 3)
EAM_medias_estacionales <- sum(abs(Tarea1$`Ventas (M€)` - Tarea1$medias_estacionales))/length(Tarea1$`Ventas (M€)`)
print(paste0(c("EAM = ", EAM_medias_estacionales)))
Tarea1_parcial <- Tarea1[,5:ncol(Tarea1)]
Tarea1_parcial
Tarea1_parcial <- Tarea1[5:nrow(Tarea1),]
Tarea1_parcial
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 3)
Tarea1_parcial <- Tarea1[5:nrow(Tarea1),]
EAM_medias_estacionales <- sum(abs(Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales))/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("EAM = ", EAM_medias_estacionales)))
ECM <- sum((Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales)^2)/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("ECM = ", EAM_medias_estacionales)))
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 3)
Tarea1_parcial <- Tarea1[5:nrow(Tarea1),]
EAM_medias_estacionales <- sum(abs(Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales))/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("EAM = ", EAM_medias_estacionales)))
ECM_medias_estacionales <- sum((Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales)^2)/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("ECM = ", ECM_medias_estacionales)))
library(readxl)
library(dplyr)
library(ggplot2)
Tarea1 <- read_excel("C:/Users/rsier/Desktop/MASTERS/LaSalle - MUDS/2n Semestre/Optativa2 - Forecasting/T3 Modelos y sistemas dinámicos/Lab3_Datos.xlsx",
sheet = "Tarea_1")
head(Tarea1)
Tarea1 <- Tarea1 %>%
mutate(Time_Index = row_number())
ggplot(Tarea1,
aes(x = Time_Index, y = `Ventas (M€)`)) +
geom_line()
Tarea1$Predicciones_ingenuas <- c(rep(NA,4) , Tarea1$`Ventas (M€)`[1:(length(Tarea1$`Ventas (M€)`)-4)])
Tarea1_parcial <- Tarea1[5:nrow(Tarea1),]
EAM_Predicciones_ingenuas <- sum(abs(Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$Predicciones_ingenuas))/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("EAM = ", EAM_Predicciones_ingenuas)))
ECMPredicciones_ingenuas <- sum((Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$Predicciones_ingenuas)^2)/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("ECM = ", ECMPredicciones_ingenuas)))
medias_estacionales <- c()
for(i in 1:length(unique(Tarea1$Trimestre))){
trimestre_i <- subset(Tarea1, Tarea1$Trimestre == unique(Tarea1$Trimestre)[i])
mean_trimestre_i <- mean(trimestre_i$`Ventas (M€)`)
medias_estacionales <- c(medias_estacionales, mean_trimestre_i)
}
Tarea1$medias_estacionales <- rep(medias_estacionales, 3)
Tarea1_parcial <- Tarea1[5:nrow(Tarea1),]
EAM_medias_estacionales <- sum(abs(Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales))/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("EAM = ", EAM_medias_estacionales)))
ECM_medias_estacionales <- sum((Tarea1_parcial$`Ventas (M€)` - Tarea1_parcial$medias_estacionales)^2)/length(Tarea1_parcial$`Ventas (M€)`)
print(paste0(c("ECM = ", ECM_medias_estacionales)))
ggplot(Tarea1, aes(x = Time_Index)) +
geom_line(aes(y = `Ventas (M€)`, colour = "Serie Real"), size = 1.2) +
geom_point(aes(y = `Ventas (M€)`, colour = "Serie Real")) +
geom_line(aes(y = Predicciones_ingenuas, colour = "Método ingenuo"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = Predicciones_ingenuas, colour = "Método ingenuo")) +
geom_line(aes(y = medias_estacionales, colour = "Método de las medias estacionales"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = medias_estacionales, colour = "Método de las medias estacionales")) +
labs(title = "Comparación de la Serie Real con las distintas predicciones",
x = "Trimestre", y = "M€") +
scale_colour_manual("", breaks = c("Serie Real", "Método ingenuo", "Método de las medias estacionales"),
values = c("blue", "green", "red")) +
theme_minimal()
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000, # Cluster 2
)
data <- matrix(areas_GK, nrow=3, ncol=2)
colnames(data) <- c("Generales", "Portería")
rownames(data) <- paste("Cluster", 0:2, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="blue") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Cargar las librerías
library(ggplot2)
library(reshape2)
library(ggplotify)
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000, # Cluster 2
)
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000 # Cluster 2
)
data <- matrix(areas_GK, nrow=3, ncol=2)
colnames(data) <- c("Generales", "Portería")
rownames(data) <- paste("Cluster", 0:2, sep="-")
data
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="blue") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
p
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000 # Cluster 2
)
data <- matrix(areas_GK, nrow=3, ncol=2)
colnames(data) <- c("Generales", "Portería")
rownames(data) <- paste("Cluster", 0:2, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="firebrick3") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
p
areas_team <- c(0.6941906, 1.3375418, 0.6442214, 1.0770643, 0.4373130, # Cluster 0
0.6117714, 0.5843592, 0.8758165, 0.7086936, 1.3266034, # Cluster 1
0.8692844, 0.5602205, 0.6093398, 0.6786458, 1.0436169, # Cluster 2
0.8420970, 1.0608478, 0.5539426, 0.8296179, 0.5855376, # Cluster 3
0.3296221, 0.5158200, 0.2422843, 0.4788368, 0.4796137, # Cluster 4
1.1337730, 0.5256614, 0.8993048, 0.7424417, 1.2931936, # Cluster 5
0.8353533, 0.6972612, 0.9342649, 0.7983814, 0.8273176 # Cluster 6
)
data <- matrix(areas_team, nrow=7, ncol=5, byrow = T)
colnames(data) <- c("Generales", "Ataque", "Transiciones", "Defensa", "Portería")
rownames(data) <- paste("Cluster", 0:6, sep="-")
data
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="mediumpurple") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
p
# Instalar las librerías necesarias
# install.packages("ggplot2")
# install.packages("reshape2")
# install.packages("ggplotify")
# Cargar las librerías
library(ggplot2)
library(reshape2)
library(ggplotify)
# Jugadores
areas_players <- c(0.4807165, 0.9773679,0.6431914,0.7618550, # Cluster 0
0.4978966, 0.7023625, 0.4865687, 0.8044425, # Cluster 1
0.4221689, 1.5026961, 0.4671690, 0.6203932, # Cluster 2
1.672592, 1.347983, 1.187315, 1.356312, # Cluster 3
0.5252032, 0.8653762, 0.5856638, 0.6968065, # Cluster 4
1.4941275, 2.1381562, 0.7764619, 1.1956160, # Cluster 5
1.7177905, 0.9450792, 0.9537424, 1.2808958, # Cluster 6
0.7813351, 1.1103094, 0.7647087, 0.8493205, # Cluster 7
0.3081227, 1.1853143, 0.4700035, 0.5931079, # Cluster 8
1.1505735, 1.7918442, 0.8744959, 1.1061470, # Cluster 9
1.806370, 1.850751, 1.092564, 1.460573, # Cluster 10
1.766402, 1.212504, 1.138877, 1.215160, # Cluster 11
0.2651935, 1.3940233, 0.3280934, 0.3776701, # Cluster 12
0.2651935, 1.3940233, 0.3280934, 0.3776701 # Cluster 13
)
data <- matrix(areas_players, nrow=14, ncol=4, byrow = T)
colnames(data) <- c("Generales", "Ataque", "Transiciones", "Defensa")
rownames(data) <- paste("Cluster", 0:13, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="dodgerblue4") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_players.png", plot=as.ggplot(p), width=10, height=6)
# Porteros
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000 # Cluster 2
)
data <- matrix(areas_GK, nrow=3, ncol=2, byrow = T)
colnames(data) <- c("Generales", "Portería")
rownames(data) <- paste("Cluster", 0:2, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="firebrick3") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_gk.png", plot=as.ggplot(p), width=10, height=6)
# Equipos
areas_team <- c(0.6941906, 1.3375418, 0.6442214, 1.0770643, 0.4373130, # Cluster 0
0.6117714, 0.5843592, 0.8758165, 0.7086936, 1.3266034, # Cluster 1
0.8692844, 0.5602205, 0.6093398, 0.6786458, 1.0436169, # Cluster 2
0.8420970, 1.0608478, 0.5539426, 0.8296179, 0.5855376, # Cluster 3
0.3296221, 0.5158200, 0.2422843, 0.4788368, 0.4796137, # Cluster 4
1.1337730, 0.5256614, 0.8993048, 0.7424417, 1.2931936, # Cluster 5
0.8353533, 0.6972612, 0.9342649, 0.7983814, 0.8273176 # Cluster 6
)
data <- matrix(areas_team, nrow=7, ncol=5, byrow = T)
colnames(data) <- c("Generales", "Ataque", "Transiciones", "Defensa", "Portería")
rownames(data) <- paste("Cluster", 0:6, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="mediumpurple") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_teams.png", plot=as.ggplot(p), width=10, height=6)
setwd("C:/Users/rsier/Desktop/MASTERS/LaSalle - MUDS/TFM/IMG/5. Clustering/Descriptiva")
# Instalar las librerías necesarias
# install.packages("ggplot2")
# install.packages("reshape2")
# install.packages("ggplotify")
setwd("C:/Users/rsier/Desktop/MASTERS/LaSalle - MUDS/TFM/IMG/5. Clustering/Descriptiva")
# Cargar las librerías
library(ggplot2)
library(reshape2)
library(ggplotify)
# Jugadores
areas_players <- c(0.4807165, 0.9773679,0.6431914,0.7618550, # Cluster 0
0.4978966, 0.7023625, 0.4865687, 0.8044425, # Cluster 1
0.4221689, 1.5026961, 0.4671690, 0.6203932, # Cluster 2
1.672592, 1.347983, 1.187315, 1.356312, # Cluster 3
0.5252032, 0.8653762, 0.5856638, 0.6968065, # Cluster 4
1.4941275, 2.1381562, 0.7764619, 1.1956160, # Cluster 5
1.7177905, 0.9450792, 0.9537424, 1.2808958, # Cluster 6
0.7813351, 1.1103094, 0.7647087, 0.8493205, # Cluster 7
0.3081227, 1.1853143, 0.4700035, 0.5931079, # Cluster 8
1.1505735, 1.7918442, 0.8744959, 1.1061470, # Cluster 9
1.806370, 1.850751, 1.092564, 1.460573, # Cluster 10
1.766402, 1.212504, 1.138877, 1.215160, # Cluster 11
0.2651935, 1.3940233, 0.3280934, 0.3776701, # Cluster 12
0.2651935, 1.3940233, 0.3280934, 0.3776701 # Cluster 13
)
data <- matrix(areas_players, nrow=14, ncol=4, byrow = T)
colnames(data) <- c("Generales", "Ataque", "Transiciones", "Defensa")
rownames(data) <- paste("Cluster", 0:13, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="dodgerblue4") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_players.png", plot=as.ggplot(p), width=10, height=6)
# Porteros
areas_GK <- c(1.484962, 1.169856, # Cluster 0
0.06016747, 0.29031127, # Cluster 1
0.4089426, 0.5364000 # Cluster 2
)
data <- matrix(areas_GK, nrow=3, ncol=2, byrow = T)
colnames(data) <- c("Generales", "Portería")
rownames(data) <- paste("Cluster", 0:2, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="firebrick3") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_gk.png", plot=as.ggplot(p), width=10, height=6)
# Equipos
areas_team <- c(0.6941906, 1.3375418, 0.6442214, 1.0770643, 0.4373130, # Cluster 0
0.6117714, 0.5843592, 0.8758165, 0.7086936, 1.3266034, # Cluster 1
0.8692844, 0.5602205, 0.6093398, 0.6786458, 1.0436169, # Cluster 2
0.8420970, 1.0608478, 0.5539426, 0.8296179, 0.5855376, # Cluster 3
0.3296221, 0.5158200, 0.2422843, 0.4788368, 0.4796137, # Cluster 4
1.1337730, 0.5256614, 0.8993048, 0.7424417, 1.2931936, # Cluster 5
0.8353533, 0.6972612, 0.9342649, 0.7983814, 0.8273176 # Cluster 6
)
data <- matrix(areas_team, nrow=7, ncol=5, byrow = T)
colnames(data) <- c("Generales", "Ataque", "Transiciones", "Defensa", "Portería")
rownames(data) <- paste("Cluster", 0:6, sep="-")
# Convertir a data frame y reestructurar para ggplot
data_melted <- melt(data)
# Crear el gráfico
p <- ggplot(data_melted, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="white") +
geom_text(aes(label=sprintf("%.1f", value)), color="black", size=3) + # Añadir números
scale_fill_gradient(low="white", high="mediumpurple") +
scale_y_discrete(limits = rev(levels(data_melted$Var1))) + # Invertir el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5), # Mantener texto horizontal
axis.text.y = element_text(angle = 0), # Mantener texto horizontal
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")) +
labs(fill = "Value")
# Exportar el gráfico como imagen
ggsave("tabla_resumen_teams.png", plot=as.ggplot(p), width=10, height=6)
